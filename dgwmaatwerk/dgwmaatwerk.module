<?php
/*
 +--------------------------------------------------------------------+
 | De Goede Woning CiviCRM  Customizations using hooks for De Goede   |
 |                          Woning by Erik Hommel (EE-atWork)         |
 |                                                                    |
 | Hook dgwmaatwerk_civicrm_pre (13 November 2010 - Erik Hommel)      |
 |  Customization to check if one of the fields shared with First has |
 |  changed or is created. If so, add contact to group First Sync and |
 |  set custom data in sync table                                     |
 |                                                                    |
 | Copyright (C) 2010 Erik Hommel and De Goede Woning                 |
 | Licensed to CiviCRM under the Academic Free License version 3.0.   |
 |                                                                    |
 | In hook pre database values for contact, email, address and phone  |
 | are saved to sync_tables, so that in hook postProcess new values   |
 | can be compared to old values. This needs to be done in the hook   |
 | pre because database values have not been updated yet.             |
 | Hook pre also used for BOS1303566                                  |
 |                                                                    |
 | In hook postProcess (for CRM_Contact_Form_Contact) database values |
 | for contact, email, address and phone are retrieved and compared   |
 | with the old values saved in the hook pre. If any changes, sync    |
 | tables are updated and household is updated if person is hoofd-    |
 | huurder.                                                           |
 |                                                                    |
 | In hook dashboard the dashboard cache is reset when the dash       |
 | board is opened.                                                   |
 |                                                                    |
 | Hook validate is used for various customized validation            |
 |                                                                    |
 | Hook buildForm is for customized screen processing                 |
 |(DGW19, incident 14 01 13 003, incident BOS1303566)                 |
 |                                                                    |
 | Hook post is used for incident 01 10 12 002 with entity Activity   |
 +--------------------------------------------------------------------+
*/

function dgwmaatwerk_civicrm_pre( $op, $objectName, $objectId, &$objectRef ) {
    /*
     * only for Organization when operation is edit
     */
    if ($objectName == "Organization" && $op == "edit") {
        require_once 'dgwConfig.php';
        /*
         * retrieve db values from organization if there is a
         * persoonsnummer first for the organization
         */
        $fldorgpersnr = FLDORGPERSNR;
        $select_check = "SELECT * FROM ".TABFIRSTORG." WHERE entity_id =
            $objectId";
        $daoCheckOrg = CRM_Core_DAO::executeQuery($select_check);
        if ($daoCheckOrg->fetch()) {
            if (!empty($daoOrgCheck->$fldorgpersnr)) {
                $org_first = true;
            } else {
                $org_first = false;
            }
        } else {
            $org_first = false;
        }
        if ($first_org) {
            $select_org = "SELECT organization_name FROM civicrm_contact where
                id = $objectId";
            $daoOrg = CRM_Core_DAO::executeQuery($select_org);
            if ($daoOrg->fetch()) {
                $sync_name = CRM_Core_DAO::escapeString($daoOrg->organization_name);
            }
            /*
             * add record to sync_contact table, but first remove any
             * records for contact_id that might still be there (for
             * instance because user was created in Drupal) - issue 207
             */
            $del_contact = "DELETE FROM sync_contact WHERE contact_id = $objectId";
            CRM_Core_DAO::executeQuery($del_contact);
            $ins_contact = "INSERT INTO sync_contact SET contact_id = $objectId,
                last_name = '$sync_name'";
            CRM_Core_DAO::executeQuery($ins_contact);
            /*
             * retrieve db values for addresses and first remove any
             * record for contact_id that might still be there (for
             * instance because user was created in Drupal) - issue 207 
             */
            $del_address = "DELETE FROM sync_address WHERE contact_id = $objectId";
            CRM_Core_DAO::executeQuery($del_address);
            $select_address = "SELECT id, street_name, street_number,
                street_number_suffix, postal_code, city, country_id,
                location_type_id, street_unit FROM civicrm_address WHERE 
                contact_id = $objectId";
            $daoAddress = CRM_Core_DAO::executeQuery($select_address);
            while ($daoAddress->fetch()) {
                $sync_address_id = $daoAddress->id;
                $sync_street_name = CRM_Core_DAO::escapeString($daoAddress->street_name);
                $sync_street_number = $daoAddress->street_number;
                /*
                 * issue 220: if street_unit is not empty, use
                 */
                if (!empty($daoAddress->street_unit)) {
                    if (empty($daoAddress->street_number_suffix)) {
                        $sync_street_number_suffix = $daoAddress->street_unit;
                    } else {
                        $sync_street_number_suffix = $daoAddress->street_number_suffix
                            ." ".$daoAddress->street_unit;
                    }
                } else {
                    $sync_street_number_suffix = $daoAddress->street_number_suffix;
                }
		$sync_postal_code = $daoAddress->postal_code;
                $sync_city = CRM_Core_DAO::escapeString($daoAddress->city);
                $sync_country_id = $daoAddress->country_id;
                $sync_location_type_id = $daoAddress->location_type_id;
                /*
                 * add record to sync_address table
                 */
                $ins_address = "INSERT INTO sync_address SET contact_id = $objectId
                    , address_id = $sync_address_id, street_name =
                    '$sync_street_name', street_number_suffix =
                    '$sync_street_number_suffix', postal_code = '$sync_postal_code',
                    city = '$sync_city'";
                if (!empty($sync_street_number)) {
                    $ins_address = $ins_address.", street_number =
                        $sync_street_number";
                }
                if (!empty($sync_country_id)) {
                    $ins_address = $ins_address.", country_id = $sync_country_id";
                }
                if (!empty($sync_location_type_id)) {
                    $ins_address = $ins_address.", location_type_id =
                        $sync_location_type_id";
                }
                CRM_Core_DAO::executeQuery($ins_address);
            }
            /*
             * retrieve db values for emails and first remove any
             * record for contact_id that might still be there (for
             * instance because user was created in Drupal) - issue 207 
             */
            $del_email = "DELETE FROM sync_email WHERE contact_id = $objectId";
			CRM_Core_DAO::executeQuery($del_email);
            $select_email = "SELECT id, location_type_id, email FROM civicrm_email
                WHERE contact_id = $objectId";
            $daoEmail = CRM_Core_DAO::executeQuery($select_email);
            while ($daoEmail->fetch()) {
                $sync_email_id = $daoEmail->id;
                $sync_location_type_id = $daoEmail->location_type_id;
                $sync_email = CRM_Core_DAO::escapeString($daoEmail->email);
                /*
                 * add record to sync_email table
                 */
                $ins_email = "INSERT INTO sync_email SET email_id = $sync_email_id,
                    email = '$sync_email', contact_id = $objectId";
                if (!empty($sync_location_type_id)) {
                    $ins_email = $ins_email.", location_type_id =
                        $sync_location_type_id";
                }
                CRM_Core_DAO::executeQuery($ins_email);
            }
            /*
             * retrieve db values for phones and first remove any
             * record for contact_id that might still be there (for
             * instance because user was created in Drupal) - issue 207 
             */
            $del_phone = "DELETE FROM sync_phone WHERE contact_id = $objectId";
     		CRM_Core_DAO::executeQuery($del_phone);               
			$select_phone = "SELECT id, location_type_id, phone_type_id, phone FROM
                civicrm_phone WHERE contact_id = $objectId";
            $daoPhone = CRM_Core_DAO::executeQuery($select_phone);
            while ($daoPhone->fetch()) {
                $sync_phone_id = $daoPhone->id;
                $sync_location_type_id = $daoPhone->location_type_id;
                $sync_phone_type_id = $daoPhone->phone_type_id;
                $sync_phone = CRM_Core_DAO::escapeString($daoPhone->phone);
                /*
                 * add record to sync_phone table
                 */
                $ins_phone = "INSERT INTO sync_phone SET phone_id = $sync_phone_id,
                    phone = '$sync_phone', contact_id = $objectId";
                if (!empty($sync_location_type_id)) {
                    $ins_phone = $ins_phone.", location_type_id =
                        $sync_location_type_id";
                }
                if (!empty($sync_phone_type_id)) {
                    $ins_phone = $ins_phone.", phone_type_id = $sync_phone_type_id";
                }
                CRM_Core_DAO::executeQuery($ins_phone);
            }
        }
    }
    /*
     * only for Individual when operation is edit
     */
    if ($objectName == "Individual" && $op == "edit") {
        require_once 'dgwConfig.php';
        /*
         * retrieve db values from contact if not create
         */
        $select_contact = "SELECT gender_id, first_name, middle_name, last_name,
            birth_date FROM civicrm_contact where id = $objectId";
        $daoContact = CRM_Core_DAO::executeQuery($select_contact);
        if ($daoContact->fetch()) {
            $sync_gender_id = $daoContact->gender_id;
            $sync_first_name = CRM_Core_DAO::escapeString($daoContact->first_name);
            $sync_middle_name = CRM_Core_DAO::escapeString($daoContact->middle_name);
            $sync_last_name = CRM_Core_DAO::escapeString($daoContact->last_name);
            $sync_birth_date = $daoContact->birth_date;
        }
        /*
         * retrieve custom data from aanvullende persoonsgegevens
         */
        $select_custom = "SELECT ".FLDPERSBURG." FROM ".TABFIRSTPERS." WHERE
            entity_id = $objectId";
        $daoCustom = CRM_Core_DAO::executeQuery($select_custom);
        $fldpersburg = FLDPERSBURG;
        if ($daoCustom->fetch()) {
            $sync_burg_staat_id = $daoCustom->$fldpersburg;
        }
        /*
         * add record to sync_contact table, but first remove any
         * record for contact_id that might still be there (for
         * instance because user was created in Drupal) - issue 207
         */
        $del_contact = "DELETE FROM sync_contact WHERE contact_id = $objectId";
        CRM_Core_DAO::executeQuery($del_contact);
        $ins_contact = "INSERT INTO sync_contact SET contact_id = $objectId,
            first_name = '$sync_first_name', middle_name = '$sync_middle_name',
        last_name = '$sync_last_name'";
        if (!empty($sync_birth_date)) {
            $ins_contact .= ", birth_date = '$sync_birth_date'";
        }
        if (!empty($sync_burg_staat_id)) {
            $ins_contact .= ", burg_staat_id = $sync_burg_staat_id";
        }
        if (!empty($sync_gender_id)) {
            $ins_contact .= ", gender_id = $sync_gender_id";
        }
        CRM_Core_DAO::executeQuery($ins_contact);

        /*
         * retrieve db values from addresses, but first remove any
         * record for contact_id that might still be there (for
         * instance because user was created in Drupal) - issue 207
         */
        $del_address = "DELETE FROM sync_address WHERE contact_id = $objectId";
        CRM_Core_DAO::executeQuery($del_address);
        $select_address = "SELECT id, street_name, street_number,
            street_number_suffix, postal_code, city, country_id,
            location_type_id, street_unit FROM civicrm_address WHERE 
            contact_id = $objectId";
        $daoAddress = CRM_Core_DAO::executeQuery($select_address);
        while ($daoAddress->fetch()) {
            $sync_address_id = $daoAddress->id;
            $sync_street_name = CRM_Core_DAO::escapeString($daoAddress->street_name);
            $sync_street_number = $daoAddress->street_number;
            /*
             * issue 220: if street_unit is not empty, use
             */
            if (!empty($daoAddress->street_unit)) {
                if (empty($daoAddress->street_number_suffix)) {
                    $sync_street_number_suffix = $daoAddress->street_unit;
                } else {
                    $sync_street_number_suffix = $daoAddress->street_number_suffix
                        ." ".$daoAddress->street_unit;
                }
            } else {
                $sync_street_number_suffix = $daoAddress->street_number_suffix;
            }
            $sync_postal_code = $daoAddress->postal_code;
            $sync_city = CRM_Core_DAO::escapeString($daoAddress->city);
            $sync_country_id = $daoAddress->country_id;
            $sync_location_type_id = $daoAddress->location_type_id;
            /*
             * add record to sync_address table
			 */
            $ins_address = "INSERT INTO sync_address SET contact_id = $objectId
                , address_id = $sync_address_id, street_name =
                '$sync_street_name', street_number_suffix =
                '$sync_street_number_suffix', postal_code = '$sync_postal_code',
                city = '$sync_city'";
            if (!empty($sync_street_number)) {
                $ins_address = $ins_address.", street_number =
                    $sync_street_number";
            }
            if (!empty($sync_country_id)) {
                $ins_address = $ins_address.", country_id = $sync_country_id";
            }
            if (!empty($sync_location_type_id)) {
                $ins_address = $ins_address.", location_type_id =
                    $sync_location_type_id";
            }
            CRM_Core_DAO::executeQuery($ins_address);
        }
        /*
         * retrieve db values from emails, but first remove any
         * record for contact_id that might still be there (for
         * instance because user was created in Drupal) - issue 207
         */
        $del_email = "DELETE FROM sync_email WHERE contact_id = $objectId";
		CRM_Core_DAO::executeQuery($del_email);
        $select_email = "SELECT id, location_type_id, email FROM civicrm_email
            WHERE contact_id = $objectId";
        $daoEmail = CRM_Core_DAO::executeQuery($select_email);
        while ($daoEmail->fetch()) {
            $sync_email_id = $daoEmail->id;
            $sync_location_type_id = $daoEmail->location_type_id;
            $sync_email = CRM_Core_DAO::escapeString($daoEmail->email);
            /*
             * add record to sync_email table
             */
            $ins_email = "INSERT INTO sync_email SET email_id = $sync_email_id,
                email = '$sync_email', contact_id = $objectId";
            if (!empty($sync_location_type_id)) {
                $ins_email = $ins_email.", location_type_id =
                    $sync_location_type_id";
            }
            CRM_Core_DAO::executeQuery($ins_email);
        }
        /*
         * retrieve db values from phones, but first remove any
         * record for contact_id that might still be there (for
         * instance because user was created in Drupal) - issue 207
         */
        $del_phone = "DELETE FROM sync_phone WHERE contact_id = $objectId";
        CRM_Core_DAO::executeQuery($del_phone);               
        $select_phone = "SELECT id, location_type_id, phone_type_id, phone FROM
            civicrm_phone WHERE contact_id = $objectId";
        $daoPhone = CRM_Core_DAO::executeQuery($select_phone);
        while ($daoPhone->fetch()) {
            $sync_phone_id = $daoPhone->id;
            $sync_location_type_id = $daoPhone->location_type_id;
            $sync_phone_type_id = $daoPhone->phone_type_id;
            $sync_phone = CRM_Core_DAO::escapeString($daoPhone->phone);
			/*
             * add record to sync_phone table
             */
            $ins_phone = "INSERT INTO sync_phone SET phone_id = $sync_phone_id,
                phone = '$sync_phone', contact_id = $objectId";
            if (!empty($sync_location_type_id)) {
                $ins_phone = $ins_phone.", location_type_id =
                    $sync_location_type_id";
            }
            if (!empty($sync_phone_type_id)) {
                $ins_phone = $ins_phone.", phone_type_id = $sync_phone_type_id";
            }
            CRM_Core_DAO::executeQuery($ins_phone);
        }
    }
    /*
     * incident BOS1303566 - default prefix based on gender_id
     */
    if ( $objectName == "Individual" ) {
        if ( $op == "create" || $op == "edit" ) {
            switch ( $objectRef->gender_id ) {
                case 1:
                    $objectRef['prefix_id'] = 1;
                    break;
                case 2:
                    $objectRef['prefix_id'] = 2;
                    break;
                default:
                    $objectRef['prefix_id'] = 0;
		break;
		
            }
        }
    }
    /*
     * end incident BOS1303566
     */
}
function dgwmaatwerk_civicrm_postProcess($formName, &$form) {
    $change_date = date("Ymd");
    $mode = null;
    /*
     * if contact delete
     */
    if ($formName == "CRM_Contact_Form_Task_Delete") {

        require_once 'dgwConfig.php';
        $mode = "del";
        /*
         * set synctable to delete for each contact with addresses, emails and
         * phones
         */
        $contactids = $form->_contactIds;
        foreach ($contactids as $contact_id) {
            $del_contact = "UPDATE ".TABSYNC." SET ".FLDSYNCACT." = 'del', ".
                FLDSYNCDAT." = '$change_date' WHERE entity_id = $contact_id";
            CRM_Core_DAO::executeQuery($del_contact);
            $add_to_group = true;
        }
    }
    if ($formName == "CRM_Contact_Form_Contact") {
        require_once 'dgwConfig.php';
        $values = $form->getvar( '_values' );
        /*
         * if no values, then create else edit
         */
        if (empty($values)) {
			$mode = "add";
            $contact_id = $form->getvar( '_contactId' );
            /*
             * DGW TOPdesk incident 18 07 11 002 - alleen voor individual
             */
            $contact_type = $form->getvar( '_contactType');
            if ( $contact_type == "Individual" ) {
                /*
                 * issue 220: if contact is hoofdhuurder, apply create for
                 * address, email and phone to household too
                 */
                $huishouden_id = is_hoofdhuurder($contact_id);
                if ($huishouden_id != 0) {
                    apply_huishouden($huishouden_id, $contact_id);
                }
                /*
                 * set synctable to insert for contact
                 */
                $ins_contact = "INSERT INTO ".TABSYNC." SET entity_id = $contact_id, 
                    ".FLDSYNCACT." = 'ins', ".FLDSYNCENT." = 'contact', ".FLDSYNCDAT.
                    " = '$change_date', ".FLDSYNCID." = $contact_id";
                CRM_Core_DAO::executeQuery($ins_contact);
                $add_to_group = true;
                /*
                 * check if any addresses have been added and if so, insert into
                 * synctable
                 */
                $sel_address = "SELECT id FROM civicrm_address WHERE contact_id =
                    $contact_id";
                $newAddress = CRM_Core_DAO::executeQuery($sel_address);
                while ($newAddress->fetch()) {
                    $address_id = $newAddress->id;
                    /*
                     * issue 156: check if address has already been sent today (date
                     * gets set for every add/update) and if yes, sent 'upd' else
                     * sent 'ins'
                     */
                    $sel_addr = "SELECT * FROM ".TABSYNC. " WHERE entity_id =
                        $contact_id AND ".FLDSYNCENT." = 'address'";
                    $checkAddr = CRM_Core_DAO::executeQuery($sel_addr);
                    $mut = "ins";
                    $fldchangedate = FLDSYNCDAT;
                    while ($checkAddr->fetch()) {
                        $db_date = date("Ymd", strtotime($checkAddr->$fldchangedate));
                        if ($db_date == $change_date ) {
                            $mut = "upd";
                        }
                    }
                    $ins_address = "INSERT INTO ".TABSYNC." SET entity_id = $contact_id, ".
                        FLDSYNCACT." = '$mut', ".FLDSYNCENT." = 'address', ".FLDSYNCDAT.
                        " = '$change_date', ".FLDSYNCID." = $address_id";
                    CRM_Core_DAO::executeQuery($ins_address);
                }
                /*
                 * check if any emails have been added and if so, insert into
                 * synctable
                 */
                $sel_email = "SELECT id FROM civicrm_email WHERE contact_id = $contact_id";
                $newEmail = CRM_Core_DAO::executeQuery($sel_email);
                while ($newEmail->fetch()) {
                    $email_id = $newEmail->id;
                    $ins_email = "INSERT INTO ".TABSYNC." SET entity_id = $contact_id, ".
                        FLDSYNCACT." = 'ins', ".FLDSYNCENT." = 'email', ".FLDSYNCDAT.
                        " = '$change_date', ".FLDSYNCID." = $email_id";
                    CRM_Core_DAO::executeQuery($ins_email);
                }
                /*
                 * check if any phones have been added and if so, insert into synctable
                 */
                $sel_phone = "SELECT id FROM civicrm_phone WHERE contact_id = $contact_id";
                $newPhone = CRM_Core_DAO::executeQuery($sel_phone);
                while ($newPhone->fetch()) {
                    $phone_id = $newPhone->id;
                    $ins_phone = "INSERT INTO ".TABSYNC." SET entity_id = $contact_id, ".
                        FLDSYNCACT." = 'ins', ".FLDSYNCENT." = 'phone', ".FLDSYNCDAT.
                        " = '$change_date', ".FLDSYNCID." = $phone_id";
                    CRM_Core_DAO::executeQuery($ins_phone);
                }
            }
        } else {
            $contact_id = $values['id'];
            $mode = "upd";
            /*
             * issue 220: if contact is hoofdhuurder, apply create for
             * address, email and phone to household too
             */
            $huishouden_id = is_hoofdhuurder($contact_id);
            if ($huishouden_id != 0) {
                apply_huishouden($huishouden_id, $contact_id);
            }
            $update = false;
            $add_to_group = false;
            /*
             * first check if we do not already have a delete or insert action
             * in the synctable for the contact_id. If that is the case we do
             * not have to do anything
             */
            $create_delete = false;
            $fldsyncact = FLDSYNCACT;
            $sel_sync = "SELECT * FROM ".TABSYNC." WHERE entity_id = $contact_id
                AND ".FLDSYNCENT." = 'contact'";
                
            $checkSync = CRM_Core_DAO::executeQuery($sel_sync);
            while ($checkSync->fetch()) {
                if ($checkSync->$fldsyncact == "ins" || $checkSync->$fldsyncact == "del") {
                    $create_delete = true;
                }
            }
            if (!$create_delete) {
                /*
                 * check if the contact_type is organization (because First
                 * does not recognize organizations they have to be fed back
                 * as a person if they have a persoonsnummer first).
                 * Retrieve new values from DB
                 */
                $sel_newcon = "SELECT contact_type, first_name, middle_name,
                    last_name, gender_id, birth_date, organization_name FROM
                    civicrm_contact WHERE id = $contact_id";
                $newContact = CRM_Core_DAO::executeQuery($sel_newcon);
                if ($newContact->fetch()) {
                        $contact_type = $newContact->contact_type;
                    if ($contact_type == "Individual") {
                        $new_first_name = $newContact->first_name;
                        $new_middle_name = $newContact->middle_name;
                        $new_last_name = $newContact->last_name;
                        $new_gender_id = $newContact->gender_id;
                        $new_birth_date = $newContact->birth_date;
                    }
                    if ($contact_type == "Organization") {
                        $new_last_name = $newContact->organization_name;
                    }
                }
                /*
                 * retrieve new DB value for burg_staat (custom field)
                 * issue 142: and persoonsnummer first
                 */
                if ($contact_type == "Individual") {
                    $fldpersburg = FLDPERSBURG;
                    $fldpersnr = FLDPERSNR;
                    $sel_newcus = "SELECT ".FLDPERSBURG." FROM ".TABFIRSTPERS.
                        " WHERE entity_id = $contact_id";
                    $newCustom = CRM_Core_DAO::executeQuery($sel_newcus);
                    if ($newCustom->fetch()) {
                        $new_burg_staat_id = $newCustom->$fldpersburg;
                    }
                }
                /*
                 * retrieve saved values before update from sync_contact and check
                 * if any changes
                 */
                $sel_oldcon = "SELECT * FROM sync_contact WHERE contact_id =
                    $contact_id";
                $oldContact = CRM_Core_DAO::executeQuery($sel_oldcon);
                if ($oldContact->fetch()) {
                    if ($contact_type == "Individual") {
                        if ($new_first_name != $oldContact->first_name) {
                            $update = true;
                        }
                        if ($new_middle_name != $oldContact->middle_name) {
                            $update = true;
                        }
                        if ($new_last_name != $oldContact->last_name) {
                            $update = true;
                        }
                        if ($new_gender_id != $oldContact->gender_id) {
                            $update = true;
                        }
                        if (date("Ymd", strtotime($new_birth_date)) != date("Ymd",
                                strtotime($oldContact->birth_date))) {
                            $update = true;
                        }
                        if ($new_burg_staat_id != $oldContact->burg_staat_id) {
                            $update = true;
                        }
                    }
                    if ($contact_type == "Organization") {
                        if ($new_last_name != $oldContact->last_name) {
                            $update = true;
                        }
                    }
                }
                /*
                 * check if any field has changed and if so, set synctable record to
                 * action=upd
                 */
                if ($update) {
                    $upd_contact = "UPDATE ".TABSYNC." SET ".FLDSYNCACT." = 
                        'upd', ".FLDSYNCDAT." = '$change_date' WHERE entity_id
                        = $contact_id AND ".FLDSYNCENT." = 'contact'";
                    CRM_Core_DAO::executeQuery($upd_contact);
                    $add_to_group = true;
                }
                /*
                 * retrieve all phones from sync left join civicrm_phone. This contains
                 * all updates (if new and old values filled) or deletes (if new
                 * values are empty)
                 */
                $sel_phone_left = "SELECT
                    phone_id AS old_phone_id, civicrm_phone.id AS new_phone_id,
                    sync_phone.location_type_id AS old_location_type_id,
                    sync_phone.phone_type_id AS old_phone_type_id, sync_phone.phone AS
                    old_phone, civicrm_phone.location_type_id AS new_location_type_id,
                    civicrm_phone.phone_type_id AS new_phone_type_id,
                    civicrm_phone.phone AS new_phone
                    FROM
                    sync_phone LEFT JOIN civicrm_phone ON phone_id = id
                    WHERE sync_phone.contact_id = $contact_id";    
                $leftPhone = CRM_Core_DAO::executeQuery($sel_phone_left);
                while ($leftPhone->fetch()) {
                    $update = false;
                    $phone_id = $leftPhone->old_phone_id;
                    if (empty($leftPhone->new_phone_id)) {
                        /*
                         * set delete for phone id in synctable
                         */
                        $del_phone = "UPDATE ".TABSYNC." SET ".FLDSYNCACT." = 
                            'del', ".FLDSYNCDAT." = '$change_date' WHERE
                            entity_id = $contact_id AND ".FLDSYNCID." =
                            $phone_id";
                        CRM_Core_DAO::executeQuery($del_phone);
                        $add_to_group = true;

                    } else {
                        /*
                         * check if update is required for phone
                         */
                        if ($leftPhone->old_location_type_id !=
                                $leftPhone->new_location_type_id) {
                            $update = true;
                        }
                        if ($leftPhone->old_phone_type_id !=
                                $leftPhone->new_phone_type_id) {
                            $update = true;
                        }
                        if ($leftPhone->old_phone != $leftPhone->new_phone) {
                            $update = true;
                        }
                        /*
                         * if update, set update for phone in synctable
                         */
                        if ($update) {
                            $upd_phone = "UPDATE ".TABSYNC." SET ".FLDSYNCACT." 
                                = 'upd', ".FLDSYNCDAT." = '$change_date' WHERE
                                entity_id = $contact_id AND ".FLDSYNCID." =
                                $phone_id";
                            CRM_Core_DAO::executeQuery($upd_phone);
                            $add_to_group = true;
                        }
                    }
                }
                /*
                 * retrieve all phones from sync right join civicrm_phone. This contains
                 * all updates (if new and old values filled) and the additions (if old
                 * values are empty). In this case only select the latter and we
                 * have only the ones that need to be inserted
                 */
                $sel_phone_right = "SELECT
                    civicrm_phone.id AS new_phone_id
                    FROM sync_phone RIGHT JOIN civicrm_phone ON phone_id = id
                    WHERE civicrm_phone.contact_id = $contact_id AND
                    ISNULL(sync_phone.phone_id)";
                $rightPhone = CRM_Core_DAO::executeQuery($sel_phone_right);
                while ($rightPhone->fetch()) {
                    $phone_id = $rightPhone->new_phone_id;
                    $ins_phone = "INSERT INTO ".TABSYNC." SET entity_id = $contact_id, "
                        .FLDSYNCACT." = 'ins', ".FLDSYNCENT." = 'phone', ".FLDSYNCID.
                        " = $phone_id, ".FLDSYNCDAT." = '$change_date'";
                    CRM_Core_DAO::executeQuery($ins_phone);
                    $add_to_group = true;
                }
                /*
                 * retrieve all emails from sync left join civicrm_email. This contains
                 * all updates (if new and old values filled) or deletes (if new
                 * values are empty)
                 */
                $sel_email_left = "SELECT
                    email_id AS old_email_id, civicrm_email.id AS new_email_id,
                    sync_email.location_type_id AS old_location_type_id,
                    sync_email.email AS old_email, civicrm_email.location_type_id AS
                    new_location_type_id, civicrm_email.email AS new_email
                    FROM
                    sync_email LEFT JOIN civicrm_email ON email_id = id
                    WHERE sync_email.contact_id = $contact_id";
                $leftEmail = CRM_Core_DAO::executeQuery($sel_email_left);
                while ($leftEmail->fetch()) {
                    $update = false;
                    $email_id = $leftEmail->old_email_id;
                    if (empty($leftEmail->new_email_id)) {
                        /*
                         * set delete for email id in synctable
                         */
                        $del_email = "UPDATE ".TABSYNC." SET ".FLDSYNCACT." = 
                            'del', ".FLDSYNCDAT." = '$change_date' WHERE
                            entity_id = $contact_id AND ".FLDSYNCID." = $email_id";
                        CRM_Core_DAO::executeQuery($del_email);
                        $add_to_group = true;

                    } else {
                        /*
                         * check if update is required for email
                         */
                        if ($leftEmail->old_location_type_id !=
                                $leftEmail->new_location_type_id) {
                            $update = true;
                        }
                        if ($leftEmail->old_email != $leftEmail->new_email) {
                            $update = true;
                        }
                        /*
                         * if update, set update for email in synctable
                         */
                        if ($update) {
                            $upd_email = "UPDATE ".TABSYNC." SET ".FLDSYNCACT." 
                                = 'upd', ".FLDSYNCDAT." = '$change_date' WHERE
                                entity_id = $contact_id AND ".FLDSYNCID." =
                                $email_id";
                            CRM_Core_DAO::executeQuery($upd_email);
                            $add_to_group = true;
                        }
                    }
                }
                /*
                 * retrieve all emails from sync right join civicrm_email. This contains
                 * all updates (if new and old values filled) and the additions (if old
                 * values are empty). In this case only select the latter and we
                 * have only the ones that need to be inserted
                 */
                $sel_email_right = "SELECT
                    civicrm_email.id AS new_email_id
                    FROM sync_email RIGHT JOIN civicrm_email ON email_id = id
                    WHERE civicrm_email.contact_id = $contact_id AND
                    ISNULL(sync_email.email_id)";
                $rightEmail = CRM_Core_DAO::executeQuery($sel_email_right);
                while ($rightEmail->fetch()) {
                    $email_id = $rightEmail->new_email_id;
                    $ins_email = "INSERT INTO ".TABSYNC." SET entity_id = $contact_id, "
                        .FLDSYNCACT." = 'ins', ".FLDSYNCENT." = 'email', ".FLDSYNCID.
                        " = $email_id, ".FLDSYNCDAT." = '$change_date'";
                    CRM_Core_DAO::executeQuery($ins_email);
                    $add_to_group = true;
                }
                /*
                 * retrieve all addresses from sync left join civicrm_address. This
                 * contains all updates (if new and old values filled) or deletes (if
                 * new values are empty)
                 */
                $sel_address_left = "SELECT
                    address_id AS old_address_id, civicrm_address.id AS new_address_id,
                    sync_address.location_type_id AS old_location_type_id,
                    sync_address.street_name AS old_street_name,
                    sync_address.street_number AS old_street_number,
                    sync_address.street_number_suffix AS old_street_number_suffix,
                    sync_address.city AS old_city, sync_address.postal_code AS
                    old_postal_code, sync_address.country_id AS old_country_id,
                    civicrm_address.location_type_id AS new_location_type_id,
                    civicrm_address.street_name AS new_street_name,
                    civicrm_address.street_number AS new_street_number,
                    civicrm_address.street_number_suffix AS new_street_number_suffix,
                    civicrm_address.street_unit AS new_street_unit, 
                    civicrm_address.city AS new_city, civicrm_address.postal_code AS
                    new_postal_code, civicrm_address.country_id AS new_country_id
                    FROM sync_address LEFT JOIN civicrm_address ON address_id = id
                    WHERE sync_address.contact_id = $contact_id";
                $leftAddress = CRM_Core_DAO::executeQuery($sel_address_left);
                while ($leftAddress->fetch()) {
                    /*
                     * issue 220: add street_number_suffix and street_unit 
                     * from civicrm_address
                     */
                    $check_suffix = trim($leftAddress->new_street_number_suffix.
                        " ".$leftAddress->new_street_unit);
                    $update = false;
                    $address_id = $leftAddress->old_address_id;
                    if (empty($leftAddress->new_address_id)) {
                        /*
                         * set delete for address id in synctable
                         */
                        $del_address = "UPDATE ".TABSYNC." SET ".FLDSYNCACT." = 
                            'del', ".FLDSYNCDAT." = '$change_date' WHERE
                            entity_id = $contact_id AND ".FLDSYNCID." =
                            $address_id";
                        CRM_Core_DAO::executeQuery($del_address);
                        $add_to_group = true;

                    } else {
                        /*
                         * check if update is required for address
                         */
                        if ($leftAddress->old_location_type_id !=
                            $leftAddress->new_location_type_id) {
                            $update = true;
                        }
                        if ($leftAddress->old_street_name !=
                            $leftAddress->new_street_name) {
                            $update = true;
                        }
                        if ($leftAddress->old_street_number !=
                            $leftAddress->new_street_number) {
                            $update = true;
                        }
                        /*
                         * issue 220: compare suffix with combination of
                         * suffix and unit
                         */
                        if ($leftAddress->old_street_number_suffix !=
                            $check_suffix) {
                            $update = true;
                        }
                        if ($leftAddress->old_city != $leftAddress->new_city) {
                            $update = true;
                        }
                        if ($leftAddress->old_postal_code !=
                            $leftAddress->new_postal_code) {
                            $update= true;
                        }
                        if ($leftAddress->old_country_id !=
                            $leftAddress->new_country_id) {
                            $update = true;
                        }
                        /*
                         * if update, set update for address in synctable
                         */
                        if ($update) {
                            /*
                             * issue 156: check if address has already been sent
                             * today (date gets set for every add/update) and
                             * if yes, send 'upd' else send 'ins'
                             */
                            $sel_addr = "SELECT * FROM ".TABSYNC. " WHERE
                                entity_id = $contact_id AND ".FLDSYNCENT." =
                                'address'";
                            $checkAddr = CRM_Core_DAO::executeQuery($sel_addr);
                            $mut = "ins";
                            $fldchangedate = FLDSYNCDAT;
                            while ($checkAddr->fetch()) {
                                $db_date = date("Ymd",
                                        strtotime($checkAddr->$fldchangedate));
                                if ($db_date == $change_date ) {
                                    $mut = "upd";
                                }
                            }
                            $upd_address = "UPDATE ".TABSYNC." SET ".FLDSYNCACT.
                                " = '$mut', ".FLDSYNCDAT." = '$change_date' WHERE
                                entity_id = $contact_id AND ".FLDSYNCID." =
                                $address_id";
                            CRM_Core_DAO::executeQuery($upd_address);
                            $add_to_group = true;
                        }
                    }
                }
                /*
                 * retrieve all addresses from sync right join civicrm_address. This
                 * contains all updates (if new and old values filled) and the
                 * additions (if old values are empty). In this case only select the
                 * latter and we have only the ones that need to be inserted
                 */
                $sel_address_right = "SELECT
                    civicrm_address.id AS new_address_id
                    FROM sync_address RIGHT JOIN civicrm_address ON address_id = id
                    WHERE civicrm_address.contact_id = $contact_id AND
                    ISNULL(sync_address.address_id)";
                $rightAddress = CRM_Core_DAO::executeQuery($sel_address_right);
                while ($rightAddress->fetch()) {
                    $address_id = $rightAddress->new_address_id;
                    $ins_address = "INSERT INTO ".TABSYNC." SET entity_id = $contact_id, "
                        .FLDSYNCACT." = 'ins', ".FLDSYNCENT." = 'address', ".FLDSYNCID.
                        " = $address_id, ".FLDSYNCDAT." = '$change_date'";
                    CRM_Core_DAO::executeQuery($ins_address);
                    $add_to_group = true;
                }
            }
            /*
             * truncate synctables when processing is done
             */
                $truncqry = "TRUNCATE TABLE sync_address";
                CRM_Core_DAO::executeQuery($truncqry);
                $truncqry = "TRUNCATE TABLE sync_email";
                CRM_Core_DAO::executeQuery($truncqry);
                $truncqry = "TRUNCATE TABLE sync_phone";
                CRM_Core_DAO::executeQuery($truncqry);
                $truncqry = "TRUNCATE TABLE sync_contact";
                CRM_Core_DAO::executeQuery($truncqry);
        }
        if ( $add_to_group ) {
            require_once 'api/v2/Dgwcontact.php';
			
            /*
             * add contact to group FirstSync so API firstsyncget picks up the
             * record
             * 
             * issue 142: only if contact has a persoonsnummer First, otherwise
             * synchronization is not required (if not add mode!)
             */
            $fldpersnr = FLDPERSNR;
            if ( $mode == "add" ) {
                $groupparms = array(
                    'contact_id'    =>  $contact_id,
                    'group_id'      =>  FIRSTSYNC);
                civicrm_dgwcontact_groupcreate($groupparms);
            } else {
                $sel_first = "SELECT ".FLDPERSNR." FROM ".TABFIRSTPERS." WHERE entity_id = $contact_id";
                $checkFirst = CRM_Core_DAO::executeQuery($sel_first);
                if ($checkFirst->fetch()) {
                    if (!empty($checkFirst->$fldpersnr)) {
                        $groupparms = array(
                            "contact_id"    =>  $contact_id,
                            "group_id"      =>  FIRSTSYNC);
                        $resgr = civicrm_dgwcontact_groupcreate($groupparms);
                    }
                }
            }
        }
    }
}
/*---------------------------------------------------------------
 * Function to refresh dashboard cache when opened
 *-----------------------------------------------------------------*/
function dgwmaatwerk_civicrm_dashboard( $contactID, &$contentPlacement ) {
    require_once 'CRM/Core/BAO/Dashboard.php';
    CRM_Core_BAO_Dashboard::resetDashletCache( );
}
/*----------------------------------------------------------------
 * Function for customized form validation
 *----------------------------------------------------------------*/
function dgwmaatwerk_civicrm_validate( $formName, &$fields, &$files, &$form ) {
    /*
     * validatie contact formulier
     */
    if ( $formName == 'CRM_Contact_Form_Contact') {
        $errors = array( );
        /*
         * TOP desk incident 18 07 11 009  - validatie postcode op patroon 
         * 1234 AA voor nieuwe adressen en gewijzigde adressen als het
         * land gelijk is aan Nederland
         * 21 september 2011 - Erik Hommel
         */
        if ( isset ( $fields['address'] ) ) {
            foreach ($fields['address'] as $key => $address) {
                if ( isset ( $address['postal_code'] ) && !empty( $address['city'] ) ) {
                    if ( $address['country_id'] == 1152 || empty( $address['country_id'] ) ) {
                        $cijfer_deel = substr( $address['postal_code'], 0, 4);
                        if ( !ctype_digit ( $cijfer_deel ) ) {
                            $errors['address[' . $key . '][postal_code]'] = "Postcode moet ingevuld worden in het formaat 1234 AA. De eerste 4 tekens zijn nu niet alleen maar cijfers.";
                        }
                        $alfa_deel = substr( $address['postal_code'], -2 );
                        if ( !ctype_alpha ( $alfa_deel ) ) {
                            $errors['address[' . $key . '][postal_code]'] = "Postcode moet ingevuld worden in het formaat 1234 AA. De laatste twee tekens zijn nu niet alleen maar letters";
                        }
                        if ( strlen ( $address['postal_code'] ) != 7 ) {
                            $errors['address[' . $key . '][postal_code]'] = "Postcode is langer of korter dan 7 tekens, dat kan niet.";
                        }
                        if ( substr( $address['postal_code'] , 4, 1 ) != " " ) {
                            $errors['address[' . $key . '][postal_code]'] = "Postcode moet ingevuld worden in het formaat 1234 AA. Er staat nu geen spatie in het midden?";
                        }
                    }
                }
                /*
                 * TOP desk incident 11 07 11 003 - validatie huisnummer
                 * moet gevuld zijn als straat gevuld, en moet numeriek zijn
                 * Het kan zijn dat street_address gevuld is, het kan ook zijn dat
                 * de aparte velden gevuld zijn
                 * 27 maart 2012, Erik Hommel
                 */
                if ( isset( $address['street_address'] ) && !empty( $address['street_address']) ) {
                    /*
                     * eerst adres parsen zodat huisnummer apart staat
                     */
                    $streetNumber = null;
                    $streetName = null;
                    $addressParts = CRM_Core_BAO_Address::parseStreetAddress( $address['street_address'] );
                    if ( isset( $addressParts['street_number'] ) ) {
                        $streetNumber = $addressParts['street_number'];
                        $streetName = $addressParts['street_name'];
                        /*
                         * als streetName gevuld mag streetNumber niet leeg
                         */
                        if ( !empty( $streetName ) && empty( $streetNumber ) ) {
                            $errors['address[' .$key . '][street_address]'] = "Huisnummer moet ingevuld worden als straat ingevuld is!";
                        }
                        /*
                         * streetNumber moet numeriek zijn
                         */
                        if (  !ctype_digit( $streetNumber ) ) {
                            $errors['address[' .$key . '][street_address]'] = "Huisnummer mag alleen cijfers bevatten!";
                        }
                    }
                } elseif ( isset( $address['street_name'] ) && !empty( $address['street_name'] ) ) {
                    if ( empty( $address['street_number'] ) ) {
                        $errors['address[' .$key . '][street_number]'] = "Huisnummer moet ingevuld worden als straat ingevuld is!";
                    }
                } elseif ( isset( $address['street_number'] ) && !empty( $address['street_number'] ) ) {
                    if ( empty( $address['street_name'] ) ) {
                        $errors['address[' .$key . '][street_name]'] = "Straat moet ingevuld worden als huisnummer ingevuld is!";
                    }
                }
                /*
                 * TOP desk incident 11 07 11 003 - validatie adres gevuld,
                 * dan moet plaats ook gevuld zijn
                 * 7 mei 2012, Erik Hommel
                 */
                if ( isset( $address['street_address'] ) && !empty( $address['street_address']) ) {
                    if ( empty( $address['city'] ) ) {
                        $errors['address[' .$key . '][city]'] = "Plaats is leeg terwijl straat wel gevuld is, beiden moeten of leeg of gevuld zijn!";
                    }
                }
                /*
                 * TOP desk incident 11 07 11 003 - validatie postcode gevuld,
                 * dan moet plaats ook gevuld zijn en vice versa
                 * 7 mei 2012, Erik Hommel
                 */
                if ( isset( $address['city'] ) && !empty( $address['city']) ) {
                    if ( empty( $address['postal_code'] ) ) {
                        $errors['address[' .$key . '][postal_code]'] = "Postcode is leeg terwijl plaats wel gevuld is, beiden moeten of leeg of gevuld zijn!";
                    }
                }
                if ( isset( $address['postal_code'] ) && !empty( $address['postal_code']) ) {
                    if ( empty( $address['city'] ) ) {
                        $errors['address[' .$key . '][city]'] = "Plaats is leeg terwijl postcode wel gevuld is, beiden moeten of leeg of gevuld zijn!";
                    }
                }
                /*
                 * TOP desk incident 19 07 11 002 - validatie extra adresregel(s)
                 * mag alleen gevuld zijn als adresregel zelf ook gevuld is
                 * Controleren voor het geval dat street_address gevuld is
                 * en ook als aparte velden gevuld zijn
                 * Ook controleren voor postcode, plaats
                 * 28 maart 2012, Erik Hommel
                 */
                if ( isset( $address['supplemental_address_1'] ) && !empty( $address['supplemental_address_1'] ) ) {
                    if ( empty( $address['street_address'] ) && empty( $address['street_name'] ) ) {
                        $errors['address[' .$key . '][supplemental_address_1]'] = "Adres toevoeging 1 mag alleen ingevuld zijn als er ook een adres is, dat is nu leeg!";
                    }
                }
                if ( isset( $address['supplemental_address_2'] ) && !empty( $address['supplemental_address_2'] ) ) {
                    if ( empty( $address['street_address'] ) && empty( $address['street_name'] ) ) {
                        $errors['address[' .$key . '][supplemental_address_2]'] = "Adres toevoeging 2 mag alleen ingevuld zijn als er ook een adres is, dat is nu leeg!";
                    }
                }
                if ( isset( $address['postal_code'] ) && !empty( $address['postal_code'] ) ) {
                    if ( empty( $address['street_address'] ) && empty( $address['street_name'] ) ) {
                        $errors['address[' .$key . '][postal_code]'] = "Postcode mag alleen ingevuld zijn als er ook een adres is, dat is nu leeg!";
                    }
                }
                if ( isset( $address['city'] ) && !empty( $address['city'] ) ) {
                    if ( empty( $address['street_address'] ) && empty( $address['street_name'] ) ) {
                        $errors['address[' .$key . '][city]'] = "Plaats mag alleen ingevuld zijn als er ook een adres is, dat is nu leeg!";
                    }
                    if ( empty( $address['postal_code'] ) && empty( $address['postal_code'] ) ) {
                        $errors['address[' .$key . '][postal_code]'] = "Er moet een postcode ingevuld worden als er een plaats is ingevuld!";
                    }
                }
            }
            if ( empty ( $errors ) ) {
                return true;
            } else {
                return $errors;
            }
        }
    }
}
/*----------------------------------------------------------------
 * Function for customized form building
 *----------------------------------------------------------------*/
function dgwmaatwerk_civicrm_buildForm($formName, &$form) {
    /*
     * incident 14 01 13 003 groep DirBest mag alleen beschikbaar zijn als
     * gebruiker in die groep of beheerder
     * DGW19 groep Consulenten Wijk en Ontwikkeling alleen beschikbaar als 
     * gebruiker in die groep of beheerder
     * DGW21 sommige groepen alleen beschikbaar voor beheerders (o a FirstSync,
     * SyncGebruikers)
     */
    if ( $formName == "CRM_Contact_Form_GroupContact") {
        /*
         * check eerst of gebruiker beheerder. Als dat het geval is mogen
         * alle groepen. Als gebruiker beheerder, dan lid van groep 1 (Administrators)
         */
        global $user;
        $userBeheerder = false;
        if ( in_array( "klantinformatie admin", $user->roles ) ) {
            $userBeheerder = true;
        }
        if ( !$userBeheerder ) {
            $elements = & $form->getvar('_elements');
            $element = & $elements[1];
            $opties = & $element->_options;
            foreach ( $opties as $optie=>$waarden ) {
                /*
                 * DGW21 groepen die alleen voor administrator zichtbaar zijn weghalen
                 */
                if ( $waarden['text'] == "Complex 37 en 46B voor Elke" ) {
                    unset( $opties[$optie]);
                }
                if ( $waarden['text'] == "SyncGebruikers" ) {
                    unset( $opties[$optie]);
                }
                if ( $waarden['text'] == "FirstSync" ) {
                    unset( $opties[$optie]);
                }
                /*
                 * groepen voor gebruiker ophalen met API en checken
                 * of er groep Consulenten Wijk en Ontwikkeling (DGW19)
                 * of groep Dir/Best (incident 14 01 13 003) er tussen
                 * zit
                 */
                if ( !$session ) {
                    $session =& CRM_Core_Session::singleton();
                }
                $userID  = $session->get( 'userID' );
                require_once 'CRM/Utils/DgwUtils.php';
                $checkUserParams = array( 
                    'user_id'       =>  $userID,
                    'is_wijk'       =>  1,
                    'is_dirbest'    =>  1
                );
                $checkUser = CRM_Utils_DgwUtils::getGroupsCurrentUser( $checkUserParams );
                if ( $checkUser['is_error'] == 0 ) {
                    $userWijk = $checkUser['wijk'];
                    $userDirBest = $checkUser['dirbest'];
                } else {
                    $userWijk = false;
                    $userDirBest = false;
                }
                /*
                 * DGW19 alleen groep Consulenten Wijk en Ontwikkeling als lid van die groep
                 */
                if ( $waarden['text'] == "Consulenten Wijk en Ontwikkeling" ) {
                    if ( !$userWijk ) {
                        unset( $opties[$optie]);
                    }
                }
                /*
                 * incident 14 01 13 003 alleen groep Dir/Best als lid van die groep
                 */
                if ( $waarden['text'] == "Dir/Best" ) {
                    if ( !$userDirBest ) {
                        unset ( $opties[$optie] );
                    }
                }
            }
        }
    }
    /*
     * DGW24: standaard uitzetten vinkje bij 'doorkliks volgen'
     */
    if ( $formName == "CRM_Mailing_Form_Settings" ) {
        $defaults = array('url_tracking' => 0);
        $form->setDefaults( $defaults );
    }
    // end DGW24
    if ($formName == "CRM_Case_Form_CaseView") {
        /*
         * DGW19 :incident 06 10 11 005 : optie Gevoelige informatie
         * (activity type 110 in prod) alleen laten zien als ingelogde
         * gebruiker lid van speciale groep (18 in prod)
         */
        if ( $form->elementExists( 'activity_type_id' ) ) {
            /*
             * check of gebruiker bevoegd is voor gevoelige informatie 
             */
            require_once 'CRM/Utils/DgwUtils.php';
            if ( !$session ) {
                $session = & CRM_Core_Session::singleton();
            }
            $userID = $session->get( 'userID' );            
            $checkUserParams = array( 
                'user_id'       =>  $userID,
                'is_wijk'       =>  1
            );
            $checkUser = CRM_Utils_DgwUtils::getGroupsCurrentUser( $checkUserParams );
            if ( $checkUser['is_error'] == 0 ) {
                $userWijk = $checkUser['wijk'];
            } else {
                $userWijk = false;
            }
            $elements = & $form->getElement('activity_type_id');
            $options = & $elements->_options;
            foreach ($options as $sleutel=>$optie) {
                if ( $optie['attr']['value'] == 110) {
                    if ( $userWijk == false ) {
                        unset($options[$sleutel]);
                    }
                }
            }
        }
    }
    if ( $formName == "CRM_Activity_Form_Activity" ) {
        /*
         * incident 14 01 13 003 - activiteittype uit selectielijst halen voor
         * Dir/Best
         * (gelijk aanbrengen voor DGW19, was in eerste instantie over het
         * hoofd gezien)
         */
        global $user;
        /*
         * check eerst of gebruiker beheerder. Als dat het geval is mogen
         * alle activiteiten. Als gebruiker beheerder, dan lid van groep 1 (Administrators)
         */
        $userBeheerder = false;
        if ( in_array( "klantinformatie admin", $user->roles ) ) {
            $userBeheerder = true;
        }
        if ( !$userBeheerder ) {
            /*
             * alle opties voor type activiteit en geplande vervolgactiviteiten ophalen
             */
            $elements = & $form->getvar('_elements');
            $objActTypes = & $elements[5];
            $optActTypes = & $objActTypes->_options;
            $objVervolgTypes = & $elements[13];
            $optVervolgTypes = & $ $objVervolgTypes->_options;
            /*
             * groepen van ingelogde gebruiker ophalen en kijken of groep
             * Dir/Best (incident 14 03 12 003) of Consulent Wijk en Ontwikkeling
             * (DGW19) er bij zit
             */
            require_once 'CRM/Utils/DgwUtils.php';
            if ( !$session ) {
                $session =& CRM_Core_Session::singleton();
            }
            $userID = $session->get( 'userID' );            
            $checkUserParams = array( 
                'user_id'       =>  $userID,
                'is_wijk'       =>  1,
                'is_dirbest'    =>  1
            );
            $checkUser = CRM_Utils_DgwUtils::getGroupsCurrentUser( $checkUserParams );
            if ( $checkUser['is_error'] == 0 ) {
                $userWijk = $checkUser['wijk'];
                $userDirBest = $checkUser['dirbest'];
            } else {
                $userWijk = false;
                $userDirBest = false;
            }
            foreach ( $optActTypes as $optActType => $valActType ) {
                if ( $valActType['text'] == "Let op! Gevoelige informatie" ) {
                    if ( !$userWijk ) {
                        unset( $optActTypes[$optActType] );
                    }
                }
                if ( $valActType['text'] == "Gespreksverslag dir/best" ) {
                    if ( !$userDirBest ) {
                        unset( $optActTypes[$optActType] );
                    }
                }
            }
            foreach ( $optVervolgTypes as $optVervolgType => $valVervolgType ) {
                if ( $valVervolgType['text'] == "Let op! Gevoelige informatie" ) {
                    if ( !$userWijk ) {
                        unset( $optVervolgTypes[$optVervolgType] );
                    }
                }
                if ( $valVervolgType['text'] == "Gespreksverslag dir/best" ) {
                    if ( !$userDirBest ) {
                        unset( $optVervolgTypes[$optVervolgType] );
                    }
                }
            }
        }
        /*
         * incident 01 10 12 002 - automatisch naam gebruiker en datum bij
         * details activiteit
         */
        $action = $form->getvar('_action');
        /*
         * only for create or edit
         */
        if ( $action == 1 || $action == 2 ) {
            $type = $form->getvar('_activityTypeId');
            if ( $type == 32 ) {
                $dateNu = date('d-m-Y H:i', strtotime( 'now' ) );
                $currentUserId = $form->getvar('_currentUserId');
                require_once 'api/v2/Contact.php';
                $apiParams = array(
                    'id'                    =>  $currentUserId,
                    'return.display_name'   =>  1
                    );
                $contactApi = civicrm_contact_get( $apiParams );
                $displayName = "";
                if ( !civicrm_error( $contactApi ) ) {
                    if ( isset( $contactApi[$currentUserId]['display_name'] ) ) {
                        $displayName = $contactApi[$currentUserId]['display_name'];
                    }
                }
                if ( !empty( $displayName ) ) {
                    $tekstUserDate = $displayName.", ".$dateNu." :";
                } else {
                    $tekstUserDate = $dateNu." :";
                }
                $defaults = $form->getvar('_defaultValues');
                if ( isset( $defaults['details'] ) ) {
                    if ( empty( $defaults['details'] ) ) {
                        $details = $tekstUserDate;
                    } else {
                        $details = $defaults['details'].$tekstUserDate;
                    }
                } else {
                    $details = $tekstUserDate;
                }
                $defaults['details'] = $details;
                $form->setDefaults( $defaults );
            }
        }
    }
}
function dgwmaatwerk_civicrm_post( $op, $objectName, $objectId, &$objectRef ) {
    /*
     * BOS1303566
     */
    if ( $objectName == "Individual" ) {
        $prefix_id = 0;
        if ( $objectRef->gender_id == 1 ) {
            $prefix_id = 1;
        }
        if ( $objectRef->gender_id == 2 ) {
            $prefix_id = 2;
        }
        require_once 'CRM/Utils/DgwUtils.php';
        $displayGreetings = CRM_Utils_DgwUtils::setDisplayGreetings( $objectRef->gender_id, 
                $objectRef->middle_name, $objectRef->last_name );
        $greetings = "";
        if ( isset( $displayGreetings['is_error'] ) ) {
            if ( $displayGreetings['is_error'] == 0 ) {
               if ( isset( $displayGreetings['greetings'] ) ) {
                   $greetings = $displayGreetings['greetings'];
               }
            }
        }
        $updContact = "UPDATE civicrm_contact set prefix_id = $prefix_id, ";
        $updContact .= "email_greeting_display = '$greetings', addressee_display = '$greetings', ";
        $updContact .= "postal_greeting_display = '$greetings' WHERE id = $objectId";
        CRM_Core_DAO::executeQuery( $updContact );
    }
    /*
     * incident 20 06 12 004 bij een activiteit wordt een email gestuurd aan
     * de toegewezene (afhankelijk van CiviCRM instelling) en dat is prima. Er wordt
     * echter ook een activiteit aangemaakt van het versturen van die kopie. Bij 
     * DGW is dat niet nodig, er wordt alleen intern toegewezen en dan zitten
     * als die kopie-activiteiten in de weg. Deze dus verwijderen. Dit zou idealiter
     * met een civicrm_pre hook moeten, maar dat gaat nog niet in 3.3.5. Dus in
     * post hook verwijderen nadat die aangemaakt is
     */
    if ( $objectName == 'Activity' ) {
        if ( $objectRef->activity_type_id == 3 && !empty( $objectRef->source_record_id ) ) {
            $actPrevious = $objectId - 1;
            if ( $objectRef->source_record_id === $actPrevious ) {
                $actSubject = trim( substr( $objectRef->subject, 0, 15 ) );
                if ( $actSubject === "- copy sent to" ) {
                    $actDel = "DELETE FROM civicrm_activity WHERE id = $objectId ";
                    CRM_Core_DAO::executeQuery( $actDel );
                }
            }
       }
    }
    /*
     * incident 01 10 12 002 - automatisch naam gebruiker en datum bij
     * details activiteit
     */
    if ( $objectName == 'Activity') {
        if ( $op == "create" ) {
            $activityTypeId = $objectRef->activity_type_id;
            if ( $activityTypeId == 32 ) {
                $details = $objectRef->details;
                $activityId = $objectRef->id;
                /*
                 * details uiteensplitsen op delen tussen <p>
                 */
                $arrayDetails = explode("<p>", $details );
                if ( !empty( $arrayDetails ) ) {
                    $aantalElementen = count( $arrayDetails );
                    $lastElement = end( $arrayDetails );
                    $lastParts = explode( "</p>", $lastElement );
                    $lastTekst = trim( $lastParts[0] );
                    /*
                     * nu kijken of er tekst achter het eerste ':' staat in 
                     * details. Als dat het geval is, is er iets ingevuld en
                     * gebeurt er verder niets. Als dat niet het geval is, kijken
                     * of de datum en de naam gebruiker overeenkomen
                     */
                    $arrayAchter = explode( ":", $lastTekst );
                    $lastAchter = end( $arrayAchter);
                    if ( empty( $lastAchter ) ) {
                        $lastTekst = substr( $lastTekst, 0, -8 );
                        /*
                         * samenstellen naam gebruiker en datum om te kunnen
                         * vergelijken. Als laatste element van array Details
                         * deze tekst bevat, mag dit verwijderd worden en moet
                         * de database bijgewerkt worden
                         */
                        $dateNu = date('d-m-Y', strtotime( 'now' ) );
                        $session = CRM_Core_Session::singleton( );
                        $contactId  = $session->get( 'userID' );
                        require_once 'api/v2/Contact.php';
                        $apiParams = array(
                            'id'                    =>  $contactId,
                            'return.display_name'   =>  1
                        );
                        $contactApi = civicrm_contact_get( $apiParams );
                        $displayName = "";
                        if ( !civicrm_error( $contactApi ) ) {
                            if ( isset( $contactApi[$contactId]['display_name'] ) ) {
                                $displayName = $contactApi[$contactId]['display_name'];
                            }
                        }
                        if ( !empty( $displayName ) ) {
                            $tekstUserDate = $displayName.", ".$dateNu;
                        } else {
                            $tekstUserDate = $dateNu;
                        }
                        if ( trim( $lastTekst ) == $tekstUserDate ) {
                            array_pop( $arrayDetails );
                            $details = implode( "<p>", $arrayDetails );
                            $updAct = 
    "UPDATE civicrm_activity SET details = '$details' WHERE id = $activityId";
                            CRM_Core_DAO::executeQuery( $updAct );
                        }
                    }
                }
            }
        }
        if ( $op == "edit" ) {
            $activityTypeId = $objectRef->activity_type_id;
            if ( $activityTypeId == 32 ) {
                $details =  & $objectRef->details;
                $activityId = $objectRef->id;
                /*
                 * details uiteensplitsen op delen tussen <p>
                 */
                $arrayDetails = explode("<p>", $details );
                if ( !empty( $arrayDetails ) ) {
                    $aantalElementen = count( $arrayDetails );
                    $lastElement = end( $arrayDetails );
                    $lastParts = explode( "</p>", $lastElement );
                    $lastTekst = trim( $lastParts[0] );
                    /*
                     * nu kijken of er tekst achter het eerste ':' staat in 
                     * details. Als dat het geval is, is er iets ingevuld en
                     * gebeurt er verder niets. Als dat niet het geval is, kijken
                     * of de datum en de naam gebruiker overeenkomen
                     */
                    $arrayAchter = explode( ":", $lastTekst );
                    $lastAchter = end( $arrayAchter);
                    if ( empty( $lastAchter ) ) {
                        $lastTekst = substr( $lastTekst, 0, -8 );
                        /*
                         * samenstellen naam gebruiker en datum om te kunnen
                         * vergelijken. Als laatste element van array Details
                         * deze tekst bevat, mag dit verwijderd worden en moet
                         * de database bijgewerkt worden
                         */
                        $dateNu = date('d-m-Y', strtotime( 'now' ) );
                        $session = CRM_Core_Session::singleton( );
                        $contactId  = $session->get( 'userID' );
                        require_once 'api/v2/Contact.php';
                        $apiParams = array(
                            'id'                    =>  $contactId,
                            'return.display_name'   =>  1
                        );
                        $contactApi = civicrm_contact_get( $apiParams );
                        $displayName = "";
                        if ( !civicrm_error( $contactApi ) ) {
                            if ( isset( $contactApi[$contactId]['display_name'] ) ) {
                                $displayName = $contactApi[$contactId]['display_name'];
                            }
                        }
                        if ( !empty( $displayName ) ) {
                            $tekstUserDate = $displayName.", ".$dateNu;
                        } else {
                            $tekstUserDate = $dateNu;
                        }
                        if ( trim( $lastTekst ) == $tekstUserDate ) {
                            array_pop( $arrayDetails );
                            $details = implode( "<p>", $arrayDetails ); 
                            $updAct = 
    "UPDATE civicrm_activity SET details = '$details' WHERE id = $activityId";
                            CRM_Core_DAO::executeQuery( $updAct );
                        }
                    }
                }
            }
        }
    }
}
/*
 * function to process data address, phone and email or contact to household
 */
function apply_huishouden($huishouden_id, $contact_id) {
    /*
     * delete all addresses from household
     */
    $delAddress = "DELETE FROM civicrm_address WHERE contact_id = $huishouden_id";
    CRM_Core_DAO::executeQuery($delAddress);
    /*
     * retrieve fields for address
     */
    require_once 'CRM/Core/BAO/Address.php';
    $addressBAO = new CRM_Core_BAO_Address();
    $fields = array_keys($addressBAO->fields());
    $params = array();
    /*
     * retrieve all addresses from contact and write each one to household
     */
    $selAddress = "SELECT * FROM civicrm_address WHERE contact_id = 
            $contact_id";
    $contactAddress = CRM_Core_DAO::executeQuery($selAddress);
    while ($contactAddress->fetch()) {
        /*
         * set value for each field name 
         */
        foreach ($fields as $name) {
            if ($name != "contact_id" && $name != "id") {
                $params[$name] = $contactAddress->$name;
            }
        }
        $params['contact_id'] = $huishouden_id; 
        CRM_Core_BAO_Address::add($params, false);
    }
    /*
     * delete all phones from household
     */
    $delPhone = "DELETE FROM civicrm_phone WHERE contact_id = 
            $huishouden_id";
    CRM_Core_DAO::executeQuery($delPhone);
    /*
     * retrieve fields for phone
     */
    require_once 'CRM/Core/BAO/Phone.php';
    $phoneBAO = new CRM_Core_BAO_Phone();
    $fields = array_keys($phoneBAO->fields());
    $params = array();
    /*
     * retrieve all phones from contact and write each one to household
     */
    $selPhone = "SELECT * FROM civicrm_phone WHERE contact_id = 
            $contact_id";
    $contactPhone = CRM_Core_DAO::executeQuery($selPhone);
    while ($contactPhone->fetch()) {
        /*
         * set value for each field name
         */
        foreach ($fields as $name) {
            if ($name != "contact_id" && $name != "id") {
                $params[$name] = $contactPhone->$name;
            }
        }
        $params['contact_id'] = $huishouden_id; 
        CRM_Core_BAO_Phone::add($params);
    }
    /*
     * delete all emails from household
     */
    $delEmail = "DELETE FROM civicrm_email WHERE contact_id = 
            $huishouden_id";
    CRM_Core_DAO::executeQuery($delEmail);
    /*
     * retrieve fields for email
     */
    require_once 'CRM/Core/BAO/Email.php';
    $emailBAO = new CRM_Core_BAO_Email();
    $fields = array_keys($emailBAO->fields());
    $params = array();
    /*
     * retrieve all email from contact and write each one to household
     */
    $selEmail = "SELECT * FROM civicrm_email WHERE contact_id = 
            $contact_id";
    $contactEmail = CRM_Core_DAO::executeQuery($selEmail);
    while ($contactEmail->fetch()) {
        /*
         * set value for each field name
         */
        foreach ($fields as $name) {
            if ($name != "contact_id" && $name != "id") {
                $params[$name] = $contactEmail->$name;
            }
        }
        $params['contact_id'] = $huishouden_id; 
        CRM_Core_BAO_Email::add($params);
    }
}